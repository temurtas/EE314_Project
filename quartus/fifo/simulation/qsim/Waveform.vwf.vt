// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/02/2018 13:33:52"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    FIFOBuffer
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FIFOBuffer_vlg_sample_tst(
	clk,
	data_in,
	read_from_stack,
	rst,
	write_to_stack,
	sampler_tx
);
input  clk;
input [31:0] data_in;
input  read_from_stack;
input  rst;
input  write_to_stack;
output sampler_tx;

reg sample;
time current_time;
always @(clk or data_in or read_from_stack or rst or write_to_stack)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module FIFOBuffer_vlg_check_tst (
	data_out,
	stack_empty,
	stack_full,
	stack_half_full,
	sampler_rx
);
input [31:0] data_out;
input  stack_empty;
input  stack_full;
input  stack_half_full;
input sampler_rx;

reg [31:0] data_out_expected;
reg  stack_empty_expected;
reg  stack_full_expected;
reg  stack_half_full_expected;

reg [31:0] data_out_prev;
reg  stack_empty_prev;
reg  stack_full_prev;
reg  stack_half_full_prev;

reg [31:0] data_out_expected_prev;
reg  stack_empty_expected_prev;
reg  stack_full_expected_prev;
reg  stack_half_full_expected_prev;

reg [31:0] last_data_out_exp;
reg  last_stack_empty_exp;
reg  last_stack_full_exp;
reg  last_stack_half_full_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	data_out_prev = data_out;
	stack_empty_prev = stack_empty;
	stack_full_prev = stack_full;
	stack_half_full_prev = stack_half_full;
end

// update expected /o prevs

always @(trigger)
begin
	data_out_expected_prev = data_out_expected;
	stack_empty_expected_prev = stack_empty_expected;
	stack_full_expected_prev = stack_full_expected;
	stack_half_full_expected_prev = stack_half_full_expected;
end


// expected data_out[ 31 ]
initial
begin
	data_out_expected[31] = 1'bX;
end 
// expected data_out[ 30 ]
initial
begin
	data_out_expected[30] = 1'bX;
end 
// expected data_out[ 29 ]
initial
begin
	data_out_expected[29] = 1'bX;
end 
// expected data_out[ 28 ]
initial
begin
	data_out_expected[28] = 1'bX;
end 
// expected data_out[ 27 ]
initial
begin
	data_out_expected[27] = 1'bX;
end 
// expected data_out[ 26 ]
initial
begin
	data_out_expected[26] = 1'bX;
end 
// expected data_out[ 25 ]
initial
begin
	data_out_expected[25] = 1'bX;
end 
// expected data_out[ 24 ]
initial
begin
	data_out_expected[24] = 1'bX;
end 
// expected data_out[ 23 ]
initial
begin
	data_out_expected[23] = 1'bX;
end 
// expected data_out[ 22 ]
initial
begin
	data_out_expected[22] = 1'bX;
end 
// expected data_out[ 21 ]
initial
begin
	data_out_expected[21] = 1'bX;
end 
// expected data_out[ 20 ]
initial
begin
	data_out_expected[20] = 1'bX;
end 
// expected data_out[ 19 ]
initial
begin
	data_out_expected[19] = 1'bX;
end 
// expected data_out[ 18 ]
initial
begin
	data_out_expected[18] = 1'bX;
end 
// expected data_out[ 17 ]
initial
begin
	data_out_expected[17] = 1'bX;
end 
// expected data_out[ 16 ]
initial
begin
	data_out_expected[16] = 1'bX;
end 
// expected data_out[ 15 ]
initial
begin
	data_out_expected[15] = 1'bX;
end 
// expected data_out[ 14 ]
initial
begin
	data_out_expected[14] = 1'bX;
end 
// expected data_out[ 13 ]
initial
begin
	data_out_expected[13] = 1'bX;
end 
// expected data_out[ 12 ]
initial
begin
	data_out_expected[12] = 1'bX;
end 
// expected data_out[ 11 ]
initial
begin
	data_out_expected[11] = 1'bX;
end 
// expected data_out[ 10 ]
initial
begin
	data_out_expected[10] = 1'bX;
end 
// expected data_out[ 9 ]
initial
begin
	data_out_expected[9] = 1'bX;
end 
// expected data_out[ 8 ]
initial
begin
	data_out_expected[8] = 1'bX;
end 
// expected data_out[ 7 ]
initial
begin
	data_out_expected[7] = 1'bX;
end 
// expected data_out[ 6 ]
initial
begin
	data_out_expected[6] = 1'bX;
end 
// expected data_out[ 5 ]
initial
begin
	data_out_expected[5] = 1'bX;
end 
// expected data_out[ 4 ]
initial
begin
	data_out_expected[4] = 1'bX;
end 
// expected data_out[ 3 ]
initial
begin
	data_out_expected[3] = 1'bX;
end 
// expected data_out[ 2 ]
initial
begin
	data_out_expected[2] = 1'bX;
end 
// expected data_out[ 1 ]
initial
begin
	data_out_expected[1] = 1'bX;
end 
// expected data_out[ 0 ]
initial
begin
	data_out_expected[0] = 1'bX;
end 

// expected stack_empty
initial
begin
	stack_empty_expected = 1'bX;
	stack_empty_expected = #180000 1'b0;
	stack_empty_expected = #28000 1'bX;
end 

// expected stack_full
initial
begin
	stack_full_expected = 1'bX;
end 

// expected stack_half_full
initial
begin
	stack_half_full_expected = 1'bX;
end 
// generate trigger
always @(data_out_expected or data_out or stack_empty_expected or stack_empty or stack_full_expected or stack_full or stack_half_full_expected or stack_half_full)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected data_out = %b | expected stack_empty = %b | expected stack_full = %b | expected stack_half_full = %b | ",data_out_expected_prev,stack_empty_expected_prev,stack_full_expected_prev,stack_half_full_expected_prev);
	$display("| real data_out = %b | real stack_empty = %b | real stack_full = %b | real stack_half_full = %b | ",data_out_prev,stack_empty_prev,stack_full_prev,stack_half_full_prev);
`endif
	if (
		( data_out_expected_prev[0] !== 1'bx ) && ( data_out_prev[0] !== data_out_expected_prev[0] )
		&& ((data_out_expected_prev[0] !== last_data_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[0] = data_out_expected_prev[0];
	end
	if (
		( data_out_expected_prev[1] !== 1'bx ) && ( data_out_prev[1] !== data_out_expected_prev[1] )
		&& ((data_out_expected_prev[1] !== last_data_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[1] = data_out_expected_prev[1];
	end
	if (
		( data_out_expected_prev[2] !== 1'bx ) && ( data_out_prev[2] !== data_out_expected_prev[2] )
		&& ((data_out_expected_prev[2] !== last_data_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[2] = data_out_expected_prev[2];
	end
	if (
		( data_out_expected_prev[3] !== 1'bx ) && ( data_out_prev[3] !== data_out_expected_prev[3] )
		&& ((data_out_expected_prev[3] !== last_data_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[3] = data_out_expected_prev[3];
	end
	if (
		( data_out_expected_prev[4] !== 1'bx ) && ( data_out_prev[4] !== data_out_expected_prev[4] )
		&& ((data_out_expected_prev[4] !== last_data_out_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[4] = data_out_expected_prev[4];
	end
	if (
		( data_out_expected_prev[5] !== 1'bx ) && ( data_out_prev[5] !== data_out_expected_prev[5] )
		&& ((data_out_expected_prev[5] !== last_data_out_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[5] = data_out_expected_prev[5];
	end
	if (
		( data_out_expected_prev[6] !== 1'bx ) && ( data_out_prev[6] !== data_out_expected_prev[6] )
		&& ((data_out_expected_prev[6] !== last_data_out_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[6] = data_out_expected_prev[6];
	end
	if (
		( data_out_expected_prev[7] !== 1'bx ) && ( data_out_prev[7] !== data_out_expected_prev[7] )
		&& ((data_out_expected_prev[7] !== last_data_out_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[7] = data_out_expected_prev[7];
	end
	if (
		( data_out_expected_prev[8] !== 1'bx ) && ( data_out_prev[8] !== data_out_expected_prev[8] )
		&& ((data_out_expected_prev[8] !== last_data_out_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[8] = data_out_expected_prev[8];
	end
	if (
		( data_out_expected_prev[9] !== 1'bx ) && ( data_out_prev[9] !== data_out_expected_prev[9] )
		&& ((data_out_expected_prev[9] !== last_data_out_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[9] = data_out_expected_prev[9];
	end
	if (
		( data_out_expected_prev[10] !== 1'bx ) && ( data_out_prev[10] !== data_out_expected_prev[10] )
		&& ((data_out_expected_prev[10] !== last_data_out_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[10] = data_out_expected_prev[10];
	end
	if (
		( data_out_expected_prev[11] !== 1'bx ) && ( data_out_prev[11] !== data_out_expected_prev[11] )
		&& ((data_out_expected_prev[11] !== last_data_out_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[11] = data_out_expected_prev[11];
	end
	if (
		( data_out_expected_prev[12] !== 1'bx ) && ( data_out_prev[12] !== data_out_expected_prev[12] )
		&& ((data_out_expected_prev[12] !== last_data_out_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[12] = data_out_expected_prev[12];
	end
	if (
		( data_out_expected_prev[13] !== 1'bx ) && ( data_out_prev[13] !== data_out_expected_prev[13] )
		&& ((data_out_expected_prev[13] !== last_data_out_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[13] = data_out_expected_prev[13];
	end
	if (
		( data_out_expected_prev[14] !== 1'bx ) && ( data_out_prev[14] !== data_out_expected_prev[14] )
		&& ((data_out_expected_prev[14] !== last_data_out_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[14] = data_out_expected_prev[14];
	end
	if (
		( data_out_expected_prev[15] !== 1'bx ) && ( data_out_prev[15] !== data_out_expected_prev[15] )
		&& ((data_out_expected_prev[15] !== last_data_out_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[15] = data_out_expected_prev[15];
	end
	if (
		( data_out_expected_prev[16] !== 1'bx ) && ( data_out_prev[16] !== data_out_expected_prev[16] )
		&& ((data_out_expected_prev[16] !== last_data_out_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[16] = data_out_expected_prev[16];
	end
	if (
		( data_out_expected_prev[17] !== 1'bx ) && ( data_out_prev[17] !== data_out_expected_prev[17] )
		&& ((data_out_expected_prev[17] !== last_data_out_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[17] = data_out_expected_prev[17];
	end
	if (
		( data_out_expected_prev[18] !== 1'bx ) && ( data_out_prev[18] !== data_out_expected_prev[18] )
		&& ((data_out_expected_prev[18] !== last_data_out_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[18] = data_out_expected_prev[18];
	end
	if (
		( data_out_expected_prev[19] !== 1'bx ) && ( data_out_prev[19] !== data_out_expected_prev[19] )
		&& ((data_out_expected_prev[19] !== last_data_out_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[19] = data_out_expected_prev[19];
	end
	if (
		( data_out_expected_prev[20] !== 1'bx ) && ( data_out_prev[20] !== data_out_expected_prev[20] )
		&& ((data_out_expected_prev[20] !== last_data_out_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[20] = data_out_expected_prev[20];
	end
	if (
		( data_out_expected_prev[21] !== 1'bx ) && ( data_out_prev[21] !== data_out_expected_prev[21] )
		&& ((data_out_expected_prev[21] !== last_data_out_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[21] = data_out_expected_prev[21];
	end
	if (
		( data_out_expected_prev[22] !== 1'bx ) && ( data_out_prev[22] !== data_out_expected_prev[22] )
		&& ((data_out_expected_prev[22] !== last_data_out_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[22] = data_out_expected_prev[22];
	end
	if (
		( data_out_expected_prev[23] !== 1'bx ) && ( data_out_prev[23] !== data_out_expected_prev[23] )
		&& ((data_out_expected_prev[23] !== last_data_out_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[23] = data_out_expected_prev[23];
	end
	if (
		( data_out_expected_prev[24] !== 1'bx ) && ( data_out_prev[24] !== data_out_expected_prev[24] )
		&& ((data_out_expected_prev[24] !== last_data_out_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[24] = data_out_expected_prev[24];
	end
	if (
		( data_out_expected_prev[25] !== 1'bx ) && ( data_out_prev[25] !== data_out_expected_prev[25] )
		&& ((data_out_expected_prev[25] !== last_data_out_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[25] = data_out_expected_prev[25];
	end
	if (
		( data_out_expected_prev[26] !== 1'bx ) && ( data_out_prev[26] !== data_out_expected_prev[26] )
		&& ((data_out_expected_prev[26] !== last_data_out_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[26] = data_out_expected_prev[26];
	end
	if (
		( data_out_expected_prev[27] !== 1'bx ) && ( data_out_prev[27] !== data_out_expected_prev[27] )
		&& ((data_out_expected_prev[27] !== last_data_out_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[27] = data_out_expected_prev[27];
	end
	if (
		( data_out_expected_prev[28] !== 1'bx ) && ( data_out_prev[28] !== data_out_expected_prev[28] )
		&& ((data_out_expected_prev[28] !== last_data_out_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[28] = data_out_expected_prev[28];
	end
	if (
		( data_out_expected_prev[29] !== 1'bx ) && ( data_out_prev[29] !== data_out_expected_prev[29] )
		&& ((data_out_expected_prev[29] !== last_data_out_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[29] = data_out_expected_prev[29];
	end
	if (
		( data_out_expected_prev[30] !== 1'bx ) && ( data_out_prev[30] !== data_out_expected_prev[30] )
		&& ((data_out_expected_prev[30] !== last_data_out_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[30] = data_out_expected_prev[30];
	end
	if (
		( data_out_expected_prev[31] !== 1'bx ) && ( data_out_prev[31] !== data_out_expected_prev[31] )
		&& ((data_out_expected_prev[31] !== last_data_out_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[31] = data_out_expected_prev[31];
	end
	if (
		( stack_empty_expected_prev !== 1'bx ) && ( stack_empty_prev !== stack_empty_expected_prev )
		&& ((stack_empty_expected_prev !== last_stack_empty_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_empty :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_empty_expected_prev);
		$display ("     Real value = %b", stack_empty_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_stack_empty_exp = stack_empty_expected_prev;
	end
	if (
		( stack_full_expected_prev !== 1'bx ) && ( stack_full_prev !== stack_full_expected_prev )
		&& ((stack_full_expected_prev !== last_stack_full_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_full :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_full_expected_prev);
		$display ("     Real value = %b", stack_full_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_stack_full_exp = stack_full_expected_prev;
	end
	if (
		( stack_half_full_expected_prev !== 1'bx ) && ( stack_half_full_prev !== stack_half_full_expected_prev )
		&& ((stack_half_full_expected_prev !== last_stack_half_full_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_half_full :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_half_full_expected_prev);
		$display ("     Real value = %b", stack_half_full_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_stack_half_full_exp = stack_half_full_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#512000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module FIFOBuffer_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [31:0] data_in;
reg read_from_stack;
reg rst;
reg write_to_stack;
// wires                                               
wire [31:0] data_out;
wire stack_empty;
wire stack_full;
wire stack_half_full;

wire sampler;                             

// assign statements (if any)                          
FIFOBuffer i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.data_in(data_in),
	.data_out(data_out),
	.read_from_stack(read_from_stack),
	.rst(rst),
	.stack_empty(stack_empty),
	.stack_full(stack_full),
	.stack_half_full(stack_half_full),
	.write_to_stack(write_to_stack)
);
// data_in[ 31 ]
initial
begin
	data_in[31] = 1'b0;
end 
// data_in[ 30 ]
initial
begin
	data_in[30] = 1'b0;
end 
// data_in[ 29 ]
initial
begin
	data_in[29] = 1'b0;
end 
// data_in[ 28 ]
initial
begin
	data_in[28] = 1'b0;
end 
// data_in[ 27 ]
initial
begin
	data_in[27] = 1'b0;
end 
// data_in[ 26 ]
initial
begin
	data_in[26] = 1'b0;
end 
// data_in[ 25 ]
initial
begin
	data_in[25] = 1'b0;
end 
// data_in[ 24 ]
initial
begin
	data_in[24] = 1'b0;
end 
// data_in[ 23 ]
initial
begin
	data_in[23] = 1'b0;
end 
// data_in[ 22 ]
initial
begin
	data_in[22] = 1'b0;
end 
// data_in[ 21 ]
initial
begin
	data_in[21] = 1'b0;
end 
// data_in[ 20 ]
initial
begin
	data_in[20] = 1'b0;
end 
// data_in[ 19 ]
initial
begin
	data_in[19] = 1'b0;
end 
// data_in[ 18 ]
initial
begin
	data_in[18] = 1'b0;
end 
// data_in[ 17 ]
initial
begin
	data_in[17] = 1'b0;
end 
// data_in[ 16 ]
initial
begin
	data_in[16] = 1'b0;
end 
// data_in[ 15 ]
initial
begin
	data_in[15] = 1'b0;
end 
// data_in[ 14 ]
initial
begin
	data_in[14] = 1'b0;
end 
// data_in[ 13 ]
initial
begin
	data_in[13] = 1'b0;
end 
// data_in[ 12 ]
initial
begin
	data_in[12] = 1'b0;
end 
// data_in[ 11 ]
initial
begin
	data_in[11] = 1'b0;
end 
// data_in[ 10 ]
initial
begin
	data_in[10] = 1'b0;
end 
// data_in[ 9 ]
initial
begin
	data_in[9] = 1'b0;
end 
// data_in[ 8 ]
initial
begin
	data_in[8] = 1'b0;
end 
// data_in[ 7 ]
initial
begin
	data_in[7] = 1'b0;
end 
// data_in[ 6 ]
initial
begin
	data_in[6] = 1'b0;
end 
// data_in[ 5 ]
always
begin
	data_in[5] = 1'b0;
	data_in[5] = #256000 1'b1;
	#256000;
end 
// data_in[ 4 ]
always
begin
	data_in[4] = 1'b0;
	data_in[4] = #128000 1'b1;
	#128000;
end 
// data_in[ 3 ]
always
begin
	data_in[3] = 1'b0;
	data_in[3] = #64000 1'b1;
	#64000;
end 
// data_in[ 2 ]
always
begin
	data_in[2] = 1'b0;
	data_in[2] = #32000 1'b1;
	#32000;
end 
// data_in[ 1 ]
always
begin
	data_in[1] = 1'b0;
	data_in[1] = #16000 1'b1;
	#16000;
end 
// data_in[ 0 ]
always
begin
	data_in[0] = 1'b0;
	data_in[0] = #8000 1'b1;
	#8000;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #2000 1'b1;
	#2000;
end 

// read_from_stack
initial
begin
	read_from_stack = 1'b0;
	read_from_stack = #144000 1'b1;
	read_from_stack = #16000 1'b0;
	read_from_stack = #32000 1'b1;
	read_from_stack = #12000 1'b0;
	read_from_stack = #4000 1'b1;
	# 16000;
	repeat(9)
	begin
		read_from_stack = 1'b0;
		read_from_stack = #16000 1'b1;
		# 16000;
	end
end 

// rst
initial
begin
	rst = 1'b0;
end 

// write_to_stack
initial
begin
	repeat(9)
	begin
		write_to_stack = 1'b0;
		write_to_stack = #6000 1'b1;
		# 6000;
	end
	write_to_stack = 1'b0;
	write_to_stack = #60000 1'b1;
	write_to_stack = #8000 1'b0;
end 

FIFOBuffer_vlg_sample_tst tb_sample (
	.clk(clk),
	.data_in(data_in),
	.read_from_stack(read_from_stack),
	.rst(rst),
	.write_to_stack(write_to_stack),
	.sampler_tx(sampler)
);

FIFOBuffer_vlg_check_tst tb_out(
	.data_out(data_out),
	.stack_empty(stack_empty),
	.stack_full(stack_full),
	.stack_half_full(stack_half_full),
	.sampler_rx(sampler)
);
endmodule

